class Node(object):
    def __init__(self, value):
        self.value = value
        self.left = None
        self.right = None
 
 class binarytree(object):
    def __init__(self,root):
        self.root = Node(root)
    
    # searching function for bst
    def search(self,find_val):
        return self.preordersearch(self.root,find_val)
    
    def preordersearch(self,start,val):
        if start:
            if start.value == val:
                return True
            elif start.value < val:
                return self.preordersearch(start.right,val)
            else: 
                return self.preordersearch(start.left,val)
        return False

    # print in preorder format
    def print_bst(self):
        return self.print_bst_helper(self.root,"")
    
    def print_bst_helper(self,start,traversal):
       
            if start:
                traversal += str(start.value) + "-"
                traversal = self.print_bst_helper(start.left,traversal)
                traversal = self.print_bst_helper(start.right,traversal)
            return traversal
    
    #insert new node in the tree according to BST rules
    def insert(self,value):
        self.insert_helper(self.root,value)
        
    def insert_helper(self,current,new_val):
            
        if current.value < new_val:
            if current.right:
                self.insert_helper(current.right, new_val)
            else:
                current.right = Node(new_val)
        else:
            if current.left:
                self.insert_helper(current.left, new_val)
            else:
                current.left = Node(new_val)


# Set up tree
tree = binarytree(4)

# Insert elements
tree.insert(2)
tree.insert(1)
tree.insert(3)
tree.insert(5)

# Check search
# Should be True
print(tree.search(4))
# Should be False
print(tree.search(6))

print(tree.print_bst())
